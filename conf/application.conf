# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret = "changeme"

# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.username=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=false

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false

akka {
  loglevel = DEBUG
  //extensions = ["kamon.akka.Akka", "kamon.statsd.StatsD"]
}

kamon {
  metric {
    tick-interval = 1 seconds
    track-unmatched-entities = yes

  }
  util.filters {
    akka-actor.includes = ["**"]
    akka-router.includes = ["**"]
    akka-dispatcher.includes = ["**"]
    trace.includes =  ["**"]
    trace-segment.includes =  ["**"]
    histogram.includes =  ["**"]
    min-max-counter.includes =  ["**"]
    gauge.includes =  ["**"]
    counters.includes =  ["**"]
    http-server.includes = ["**"]
    akka-http-server.includes = ["**"]
  }

  statsd {
    hostname = "127.0.0.1"
    port = 8125
    flush-interval = 1 seconds
    # Subscription patterns used to select which metrics will be pushed to StatsD. Note that first, metrics
    # collection for your desired entities must be activated under the kamon.metrics.filters settings.
    subscriptions {
      histogram       = [ "**" ]
      min-max-counter = [ "**" ]
      gauge           = [ "**" ]
      counter         = [ "**" ]
      trace           = [ "**" ]
      trace-segment   = [ "**" ]
      akka-actor      = [ "**" ]
      akka-dispatcher = [ "**" ]
      akka-router     = [ "**" ]
      system-metric   = [ "**" ]
      http-server     = [ "**" ]
    }
    metric-key-generator = kamon.statsd.SimpleMetricKeyGenerator
    simple-metric-key-generator {
      application = "my-application"
      include-hostname = true
      hostname-override = none
      metric-name-normalization-strategy = normalize
    }
  }



  # ======================================== #
  # kamon-prometheus reference configuration #
  # ======================================== #

  prometheus {

    # Enable or disable publishing the Prometheus scraping enpoint using a embedded server.
    start-embedded-http-server = yes

    # Enable of disable including tags from kamon.prometheus.environment as labels
    include-environment-tags = no

    buckets {
      default-buckets = [
        10,
        30,
        100,
        300,
        1000,
        3000,
        10000,
        30000,
        100000
      ]

      time-buckets = [
        0.005,
        0.01,
        0.025,
        0.05,
        0.075,
        0.1,
        0.25,
        0.5,
        0.75,
        1,
        2.5,
        5,
        7.5,
        10
      ]

      information-buckets = [
        512,
        1024,
        2048,
        4096,
        16384,
        65536,
        524288,
        1048576
      ]

      # Per metric overrides are possible by specifying the metric name and the histogram buckets here
      custom {
        // example:
        // "akka.actor.processing-time" = [0.1, 1.0, 10.0]
      }
    }


    embedded-server {

      # Hostname and port used by the embedded web server to publish the scraping enpoint.
      hostname = 127.0.0.1
      port = 9095
    }
  }

  modules {
    kamon-log-reporter.auto-start = no
    kamon-scala.auto-start = yes
    kamon-system-metrics.auto-start = yes
    kamon-statsd.auto-start = no
    kamon-prometheus.auto-start = yes
    kamon-akka.auto-start = yes
  }

}